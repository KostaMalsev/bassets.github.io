{"version":3,"sources":["project/Utils.js","project/ButtonComp.js","project/MainComp.js","App.js","serviceWorker.js","index.js"],"names":["getAllUsers","a","axios","get","resp","getAllTodos","getAllPosts","getUserTodos","id","userCompleted","data","completed","filter","x","userId","map","todo","buttonComp","showAbout","about","props","open","state","setState","className","onClick","this","Component","mainComp","addUser","user","todos","utils","String","fromCharCode","key","openDetails","name","email","ButtonComp","address","street","city","zipcode","renderUser","deleteUser","value","e","document","querySelector","style","display","searchEntries","query","target","querySelectorAll","forEach","entry","children","innerHTML","includes","width","opacity","background","window","setTimeout","posts","renderedTodos","title","completeTask","renderedPosts","post","body","users","rendered","placeholder","onChange","App","MainComp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83964d75.chunk.js","sourcesContent":["import axios from 'axios/index'\r\n\r\nconst getAllUsers = async () => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/users/');\r\n    return resp;\r\n};\r\n\r\nconst getAllTodos = async () => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/todos/');\r\n    return resp;\r\n};\r\n\r\nconst getAllPosts = async () => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/posts/');\r\n    return resp;\r\n};\r\n\r\nconst getUserTodos = async (id) => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/todos?userId='+id);\r\n    return resp;\r\n};\r\n\r\nconst userCompleted = (data, id) => {\r\n    let completed = false;\r\n\r\n    let user = data.filter(x => x.userId == id);\r\n    user.map(todo => {\r\n        completed = !!todo.completed;\r\n    });\r\n\r\n    return completed;\r\n};\r\n\r\nexport default {getAllUsers, getAllPosts, getAllTodos, getUserTodos, userCompleted}","import React, {Component} from 'react';\r\n\r\nclass buttonComp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {open: false, about: ''};\r\n    }\r\n\r\n    showAbout = () => {\r\n        let about = this.props.about;\r\n        let open = !this.state.open;\r\n        this.setState({about: open ? about : '', open: open});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <div className=\"button\" onClick={this.showAbout}>About</div>\r\n            {this.state.about}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default buttonComp;","import React, {Component} from 'react';\r\nimport utils from './Utils'\r\nimport './styles.css';\r\nimport ButtonComp from './ButtonComp';\r\n\r\nclass mainComp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {users: '', posts: [], todos: [], rendered: false, renderedTodos: false, renderedPosts: false, name: ''};\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let users = await utils.getAllUsers();\r\n        let todos = await utils.getAllTodos();\r\n        let posts = await utils.getAllPosts();\r\n\r\n        this.setState({users: users.data, posts: posts.data, todos: todos.data});\r\n\r\n        let rendered = users.data.map(user => {\r\n            return this.addUser(user, todos.data);\r\n        });\r\n\r\n        document.querySelector('.entries').style.opacity = 1;\r\n        this.setState({rendered: rendered});\r\n    }\r\n\r\n    addUser = (user, todos) => {\r\n        let completed = utils.userCompleted(todos, user.id) ? 'green' : '';\r\n        return <div id={completed} className={'entry ' + String.fromCharCode(97 + user.id)} key={user.id}>\r\n            <p onClick={this.openDetails(user.id, user.name)}>{user.id}. {user.name}</p>\r\n            <p onClick={this.openDetails(user.id, user.name)}>{user.email}</p>\r\n            <div className=\"buttons\">\r\n                <ButtonComp about={<div className=\"about\">{user.address.street}, {user.address.city}<p>{user.address.zipcode}</p></div>}/>\r\n                <div className=\"button\" onClick={this.renderUser()}>Update</div>\r\n                <div className=\"button\" onClick={this.deleteUser(String.fromCharCode(97 + user.id))}>Delete</div>\r\n            </div>\r\n        </div>;\r\n    };\r\n\r\n    deleteUser = value => (e) => {\r\n        document.querySelector('.' + value).style.display = 'none';\r\n    };\r\n\r\n    renderUser = value => async () => {\r\n        /*\r\n        let userTodos = await utils.getUserTodos(id);\r\n        let todos = this.state.todos;\r\n\r\n        let newTodos = todos.map(task => {\r\n            if (task.userId == id) {\r\n                return userTodos.task;\r\n            } else {\r\n                return todos.task;\r\n            }\r\n        });\r\n\r\n        this.setState({todos: newTodos});\r\n\r\n        document.querySelectorAll('[key=' + id + ']').innerHTML = this.addUser()\r\n         */\r\n    };\r\n\r\n    searchEntries = (e) => {\r\n        let query = e.target.value;\r\n\r\n        document.querySelectorAll('.entry').forEach(entry => {\r\n            if (entry.children[0].innerHTML.includes(query) || entry.children[1].innerHTML.includes(query)) {\r\n                entry.style.display = '';\r\n            }\r\n            else {\r\n                entry.style.display = 'none';\r\n            }\r\n        });\r\n    };\r\n\r\n    openDetails = (id, name) => () => {\r\n        document.querySelector('.right').style.width = 0;\r\n        document.querySelector('.right').style.opacity = 0;\r\n        document.querySelectorAll('.entry').forEach(entry => {\r\n            entry.style.background = '';\r\n        });\r\n\r\n        window.setTimeout(() => {\r\n            this.setState({name: name});\r\n\r\n            document.querySelector('.entries').style.width = '50%';\r\n            document.querySelector('.right').style.width = '50%';\r\n            document.querySelector('.right').style.opacity = 1;\r\n            document.querySelector('.' + String.fromCharCode(97 + id)).style.background = '#404045';\r\n\r\n            let todos = this.state.todos;\r\n            let posts = this.state.posts;\r\n\r\n            let renderedTodos = todos.map(todo => {\r\n                if (todo.userId == id) {\r\n                    if (todo.completed) {\r\n                        return <div className=\"entry\">{todo.id}. {todo.title}: Completed.</div>;\r\n                    } else {\r\n                        return <div className=\"entry\">{todo.id}. {todo.title}: Not completed.\r\n                            <div className=\"button\" onClick={this.completeTask(todo.id)}>Complete</div>\r\n                        </div>;\r\n                    }\r\n                }\r\n            });\r\n\r\n            let renderedPosts = posts.map(post => {\r\n                if (post.userId == id) {\r\n                    return <div className=\"entry\">{post.id}. {post.title}<br/>{post.body}</div>;\r\n                }\r\n            });\r\n\r\n            this.setState({renderedTodos: renderedTodos, renderedPosts: renderedPosts});\r\n        }, 200)\r\n    };\r\n\r\n    completeTask = (id) => () => {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input className=\"search\" placeholder=\"Type something...\" onChange={this.searchEntries}/>\r\n                <div className=\"entries\">\r\n                    {this.state.rendered}\r\n                </div>\r\n                <div className=\"right\">\r\n                    <p className=\"title\">{this.state.name}</p>\r\n                    <div className=\"add\">Add</div>\r\n                    <div className=\"wrapper\">\r\n                        Tasks\r\n                        {this.state.renderedTodos}\r\n                    Posts\r\n                        {this.state.renderedPosts}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mainComp;","import React, {Component} from 'react';\nimport MainComp from './project/MainComp'\n\nclass App extends Component\n{\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <MainComp/>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}