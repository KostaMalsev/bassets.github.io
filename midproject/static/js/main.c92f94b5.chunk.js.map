{"version":3,"sources":["project/Utils.js","project/ButtonComp.js","project/MainComp.js","SPA/TextComp.js","App.js","SPA/MainPage.js","serviceWorker.js","index.js"],"names":["getAllUsers","a","axios","get","resp","getAllTodos","getAllPosts","getUserTodos","id","userCompleted","data","completed","filter","x","userId","map","todo","buttonComp","showAbout","about","props","open","state","setState","className","onClick","this","Component","mainComp","addUser","user","todos","utils","String","fromCharCode","key","openDetails","name","email","ButtonComp","address","street","city","zipcode","renderUser","deleteUser","value","e","document","querySelector","style","display","searchEntries","query","target","querySelectorAll","forEach","entry","children","innerHTML","includes","classList","remove","add","width","completeTask","opacity","tempTodos","type","focus","close","addTodo","text","addPost","title","body","posts","post","users","rendered","color","class","tasks","renderedTodos","renderedPosts","placeholder","position","onChange","textComp","App","MainComp","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c92f94b5.chunk.js","sourcesContent":["import axios from 'axios/index'\r\n\r\nconst getAllUsers = async () => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/users/');\r\n    return resp;\r\n};\r\n\r\nconst getAllTodos = async () => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/todos/');\r\n    return resp;\r\n};\r\n\r\nconst getAllPosts = async () => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/posts/');\r\n    return resp;\r\n};\r\n\r\nconst getUserTodos = async (id) => {\r\n    let resp = await axios.get('https://jsonplaceholder.typicode.com/todos?userId='+id);\r\n    return resp;\r\n};\r\n\r\nconst userCompleted = (data, id) => {\r\n    let completed = false;\r\n\r\n    let user = data.filter(x => x.userId == id);\r\n    user.map(todo => {\r\n        completed = !!todo.completed;\r\n    });\r\n\r\n    return completed;\r\n};\r\n\r\nexport default {getAllUsers, getAllPosts, getAllTodos, getUserTodos, userCompleted}","import React, {Component} from 'react';\r\n\r\nclass buttonComp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {open: false, about: ''};\r\n    }\r\n\r\n    showAbout = () => {\r\n        let about = this.props.about;\r\n        let open = !this.state.open;\r\n        this.setState({about: open ? about : '', open: open});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <div className=\"button\" onClick={this.showAbout}>About</div>\r\n            {this.state.about}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default buttonComp;","import React, {Component} from 'react';\r\nimport utils from './Utils'\r\nimport './styles.css';\r\nimport ButtonComp from './ButtonComp';\r\n\r\nclass mainComp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {users: '', posts: [], todos: [], rendered: false, name: '', id: 0, add: false};\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let users = await utils.getAllUsers();\r\n        let todos = await utils.getAllTodos();\r\n        let posts = await utils.getAllPosts();\r\n\r\n        this.setState({users: users.data, posts: posts.data, todos: todos.data, rendered: true});\r\n        document.querySelector('.entries').style.color = 'inherit';\r\n    }\r\n\r\n    addUser = (user, todos) => {\r\n        let completed = utils.userCompleted(todos, user.id) ? 'green' : '';\r\n        return <div id={completed} className={'entry ' + String.fromCharCode(97 + user.id)} key={user.id}>\r\n            <p onClick={this.openDetails(user.id, user.name)}>{user.id}. {user.name}</p>\r\n            <p onClick={this.openDetails(user.id, user.name)}>{user.email}</p>\r\n            <div className=\"buttons\">\r\n                <ButtonComp about={<div className=\"about\">{user.address.street}, {user.address.city}<p>{user.address.zipcode}</p></div>}/>\r\n                <div className=\"button\" onClick={this.renderUser()}>Update</div>\r\n                <div className=\"button\" onClick={this.deleteUser(String.fromCharCode(97 + user.id))}>Delete</div>\r\n            </div>\r\n        </div>;\r\n    };\r\n\r\n    deleteUser = value => (e) => {\r\n        document.querySelector('.' + value).style.display = 'none';\r\n    };\r\n\r\n    renderUser = value => async () => {\r\n    };\r\n\r\n    searchEntries = (e) => {\r\n        let query = e.target.value;\r\n\r\n        document.querySelectorAll('.entry').forEach(entry => {\r\n            if (entry.children[0].innerHTML.includes(query) || entry.children[1].innerHTML.includes(query)) {\r\n                entry.classList.remove('filtered');\r\n            }\r\n            else {\r\n                entry.classList.add('filtered');\r\n            }\r\n        });\r\n    };\r\n\r\n    openDetails = (id, name) => () => {\r\n        document.querySelectorAll('.entry').forEach(entry => {\r\n            entry.classList.remove('selected');\r\n        });\r\n        document.querySelector('.' + String.fromCharCode(97 + id)).classList.add('selected');\r\n        document.querySelector('.entries').style.width = '50%';\r\n\r\n        this.setState({name: name, id: id});\r\n\r\n        document.querySelector('.right').style.display = 'block';\r\n    };\r\n\r\n    completeTask = (id) => (e) => {\r\n        e.target.style.opacity = 0;\r\n\r\n        let tempTodos = this.state.todos.map(todo => {\r\n            if(todo.id == id) {\r\n                todo.completed = true;\r\n                return todo;\r\n            }\r\n            else {\r\n                return todo;\r\n            }\r\n        });\r\n\r\n        this.setState({todos: tempTodos});\r\n    };\r\n\r\n    open = (type) => async () => {\r\n        await this.setState({add: type});\r\n        document.querySelector('.text').focus();\r\n    };\r\n\r\n    close = () => {\r\n        this.setState({add: false});\r\n    };\r\n\r\n    addTodo = () => {\r\n        let text = document.querySelector('.text').value;\r\n        let todos = this.state.todos;\r\n\r\n        let id = 0;\r\n        todos.map(todo => {\r\n            id++;\r\n        });\r\n\r\n        todos[id+1] = {\r\n            \"userId\": this.state.id,\r\n            \"id\": id+2,\r\n            \"title\": text,\r\n            \"completed\": false\r\n        };\r\n\r\n        this.setState({todos: todos, add: false});\r\n    };\r\n\r\n    addPost = () => {\r\n        let title = document.querySelectorAll('.text')[0].value;\r\n        let body = document.querySelectorAll('.text')[1].value;\r\n        let posts = this.state.posts;\r\n\r\n        let id = 0;\r\n        posts.map(post => {\r\n            id++;\r\n        });\r\n\r\n        posts[id+1] = {\r\n            \"userId\": this.state.id,\r\n            \"id\": id+2,\r\n            \"title\": title,\r\n            \"body\": body\r\n        };\r\n\r\n        this.setState({posts: posts, add: false});\r\n    };\r\n\r\n    render() {\r\n        let rendered;\r\n        if (this.state.rendered) {\r\n            rendered = this.state.users.map(user => {\r\n                return this.addUser(user, this.state.todos);\r\n            });\r\n        }\r\n        else {\r\n            rendered = <div class=\"entries\"><div id=\"green\" class=\"entry b\"><p>1. Leanne Graham</p><p>Sincere@april.biz</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"green\" class=\"entry c\"><p>2. Ervin Howell</p><p>Shanna@melissa.tv</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"green\" class=\"entry d\"><p>3. Clementine Bauch</p><p>Nathan@yesenia.net</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"green\" class=\"entry e\"><p>4. Patricia Lebsack</p><p>Julianne.OConner@kory.org</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"\" class=\"entry f\"><p>5. Chelsey Dietrich</p><p>Lucio_Hettinger@annie.ca</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"\" class=\"entry g\"><p>6. Mrs. Dennis Schulist</p><p>Karley_Dach@jasper.info</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"green\" class=\"entry h\"><p>7. Kurtis Weissnat</p><p>Telly.Hoeger@billy.biz</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"\" class=\"entry i\"><p>8. Nicholas Runolfsdottir V</p><p>Sherwood@rosamond.me</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"green\" class=\"entry j\"><p>9. Glenna Reichert</p><p>Chaim_McDermott@dana.io</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div><div id=\"\" class=\"entry k\"><p>10. Clementina DuBuque</p><p>Rey.Padberg@karina.biz</p><div class=\"buttons\"><div><div class=\"button\">About</div></div><div class=\"button\">Update</div><div class=\"button\">Delete</div></div></div></div>;\r\n        }\r\n\r\n        let renderedTodos = this.state.todos.map(todo => {\r\n            if (todo.userId == this.state.id) {\r\n                if (todo.completed) {\r\n                    return <div className=\"entry\">{todo.title}: Completed.</div>;\r\n                } else {\r\n                    return <div className=\"entry\">{todo.title}: Not completed.\r\n                        <div className=\"button\" onClick={this.completeTask(todo.id)}>Complete</div>\r\n                    </div>;\r\n                }\r\n            }\r\n        });\r\n\r\n        let renderedPosts = this.state.posts.map(post => {\r\n            if (post.userId == this.state.id) {\r\n                return <div className=\"entry\">{post.title}<br/>{post.body}</div>;\r\n            }\r\n        });\r\n\r\n        let tasks;\r\n        if (this.state.add == 'task') {\r\n            tasks = <div><p>Add task</p><input type = \"text\" className = \"text\" placeholder = \"Title\"/><div className = \"buttons\"><div className = \"add\" onClick={this.close}>Close</div><div className=\"add\" onClick={this.addTodo}>Add</div></div></div>;\r\n        }\r\n        else {\r\n            tasks = <div><div style={{position: 'relative'}}><p>Tasks</p><div className=\"add\" onClick={this.open('task')}>Add</div></div>{renderedTodos}</div>;\r\n        }\r\n\r\n        let posts;\r\n        if (this.state.add == 'post') {\r\n            posts = <div><p>Add post</p><input type = \"text\" className = \"text\" placeholder = \"Title\"/><input type = \"text\" className = \"text\" placeholder = \"Body\"/><div className = \"buttons\"><div className = \"add\" onClick={this.close}>Close</div><div className=\"add\" onClick={this.addPost}>Add</div></div></div>;\r\n        }\r\n        else {\r\n            posts = <div><div style={{position: 'relative'}}><p>Posts</p><div className=\"add\" onClick={this.open('post')}>Add</div></div>{renderedPosts}</div>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <input className=\"search\" placeholder=\"Type something...\" onChange={this.searchEntries}/>\r\n                <div className=\"entries\">\r\n                    {rendered}\r\n                </div>\r\n                <div className=\"right\">\r\n                    <p className=\"title\">{this.state.name}</p>\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"tasks\">\r\n                            {tasks}\r\n                        </div>\r\n                        <div className=\"posts\">\r\n                            {posts}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mainComp;","import React, {Component} from 'react';\r\n\r\nclass textComp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let rendered = <div><p>{this.props.data.name}</p><p>{this.props.data.email}</p><p>{this.props.data.address.city}</p></div>;\r\n        return (\r\n            <div>\r\n                {rendered}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default textComp;","import React, {Component} from 'react';\nimport MainComp from './project/MainComp'\nimport MainPage from './SPA/MainPage'\n\nclass App extends Component\n{\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <MainComp/>\n        );\n    }\n}\n\nexport default App;","import React, {Component} from 'react';\r\nimport {Link, Route, Switch} from 'react-router-dom'\r\nimport axios from 'axios/index'\r\nimport TextComp from './TextComp'\r\n\r\nclass MainPage extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {users: '', routes: ''}\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let resp = await axios.get('https://jsonplaceholder.typicode.com/users/');\r\n\r\n        let rendered = resp.data.map(user => {\r\n            return <p><Link style={{color: 'lightblue'}} to={'/' + user.name}>{user.name}</Link></p>;\r\n        });\r\n\r\n        let renderedRoutes = resp.data.map(user => {\r\n            return <Route path={'/' + user.name} component={() => <TextComp data={user}/>}/>\r\n        });\r\n\r\n        this.setState({users : rendered, routes: renderedRoutes});\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div>\r\n                <h1>Choose a user.</h1>\r\n\r\n                {this.state.users}\r\n\r\n                <Switch>\r\n                    {this.state.routes}\r\n                </Switch>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}